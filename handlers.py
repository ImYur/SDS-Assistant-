import os, json
from datetime import datetime, timedelta
from telebot import types

OWNER_ID = int(os.getenv("OWNER_ID", "0"))
# DESIGNERS ‚Äî —Ü–µ JSON —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞, –Ω–∞–ø—Ä.:
# {"Yaryna Panchyshyn":"123456789","Yulia Sytnyk":"222222222","Kateryna Kucher":"333333333"}
DESIGNERS = json.loads(os.getenv("DESIGNERS", "{}"))

# –ü–∞–º'—è—Ç—å —É –ø—Ä–æ—Ü–µ—Å—ñ
CLIENTS = {}  # key: f"{user_id}_{chat_id}" -> dict(... –Ω–∏–∂—á–µ)
PROJECTS_BY_DESIGNER = {}  # name -> [items]

PROFILES = ["Yurii", "Olena"]


def _client_key(message):
    return f"{message.from_user.id}_{message.chat.id}"


def _client_buttons(client_key):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply|{client_key}"),
        types.InlineKeyboardButton("üéØ –í–∏–±—Ä–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç", callback_data=f"profile|{client_key}"),
        types.InlineKeyboardButton("üßë‚Äçüé® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—É", callback_data=f"to_designer|{client_key}"),
        types.InlineKeyboardButton("üìé –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", callback_data=f"history|{client_key}"),
        types.InlineKeyboardButton("üîî –§–æ–ª–ª–æ—É-–∞–ø (24h)", callback_data=f"followup|{client_key}"),
    )
    return kb


def setup_handlers(bot):
    @bot.message_handler(commands=['start'])
    def handle_start(message):
        bot.reply_to(message, "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø Stylus Assistant. –ù–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ —Ñ–æ—Ä–≤–∞—Ä–¥ –≤—ñ–¥ Upwork ‚Äî —è –≤—Å–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É—é.")

    @bot.message_handler(commands=['projects_by'])
    def projects_by(message):
        parts = message.text.split(maxsplit=1)
        if len(parts) == 1:
            bot.reply_to(message, "–í–∫–∞–∂–∏ —ñ–º‚Äô—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –ù–∞–ø—Ä.: `/projects_by Yaryna`", parse_mode="Markdown")
            return
        name = parts[1].strip()
        items = PROJECTS_BY_DESIGNER.get(name, [])
        if items:
            text = "üìã –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è *{}*:\n\n".format(name) + "\n\n".join(items[-10:])
            bot.reply_to(message, text, parse_mode="Markdown")
        else:
            bot.reply_to(message, f"üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è {name}.")

    @bot.message_handler(func=lambda m: True, content_types=['text'])
    def handle_message(message):
        # –§—ñ–∫—Å—É—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ + —ñ—Å—Ç–æ—Ä—ñ—é
        key = _client_key(message)
        now = datetime.utcnow()
        is_new = key not in CLIENTS

        if is_new:
            CLIENTS[key] = {
                "name": message.from_user.full_name,
                "chat_id": message.chat.id,
                "history": [],
                "status": "new",
                "profile": None,
                "designer": None,
                "last_file_sent": None,   # —è–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏–º–µ—à —Ñ–∞–π–ª–∏ ‚Äî –ø–æ–∑–Ω–∞—á–∏–º–æ –º–æ–º–µ–Ω—Ç
            }

        CLIENTS[key]["history"].append((now.isoformat(), message.text))
        CLIENTS[key]["status"] = "active"

        if is_new:
            tags = f"#–∫–ª—ñ—î–Ω—Ç_{message.from_user.full_name.replace(' ', '_')} #—Å—Ç–∞—Ç—É—Å_new"
            bot.reply_to(
                message,
                f"üÜï –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç: *{message.from_user.full_name}*\n{tags}",
                parse_mode="Markdown",
                reply_markup=_client_buttons(key)
            )
        else:
            bot.reply_to(
                message,
                "üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
                reply_markup=_client_buttons(key)
            )

    # ==== CALLBACKS ====

    @bot.callback_query_handler(func=lambda c: True)
    def on_cb(query):
        try:
            action, client_key = query.data.split("|", 1)
        except Exception:
            bot.answer_callback_query(query.id)
            return

        # –Ü—Å—Ç–æ—Ä—ñ—è
        if action == "history":
            hist = CLIENTS.get(client_key, {}).get("history", [])
            if not hist:
                bot.answer_callback_query(query.id, "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
                return
            text = "\n\n".join([f"{t}:\n{m}" for t, m in hist])[-4000:]
            bot.send_message(query.message.chat.id, f"üïì –Ü—Å—Ç–æ—Ä—ñ—è:\n\n{text}")
            bot.answer_callback_query(query.id)
            return

        # –í–∏–±—ñ—Ä –∞–∫–∞—É–Ω—Ç–∞
        if action == "profile":
            kb = types.InlineKeyboardMarkup(row_width=2)
            for p in PROFILES:
                kb.add(types.InlineKeyboardButton(p, callback_data=f"setprofile|{client_key}|{p}"))
            bot.send_message(query.message.chat.id, "üß© –í–∏–±–µ—Ä–∏ –ø—Ä–æ—Ñ—ñ–ª—å:", reply_markup=kb)
            bot.answer_callback_query(query.id)
            return

        if action == "setprofile":
            # –æ—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç setprofile|client_key|Profile
            parts = query.data.split("|")
            if len(parts) == 3:
                _, ck, prof = parts
                CLIENTS[ck]["profile"] = prof
                bot.send_message(query.message.chat.id, f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å: *{prof}*  #–ø—Ä–æ—Ñ—ñ–ª—å_{prof}", parse_mode="Markdown")
            bot.answer_callback_query(query.id)
            return

        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—É ‚Üí –≤–∏–±—ñ—Ä –¥–∏–∑–∞–π–Ω–µ—Ä–∞
        if action == "to_designer":
            if not DESIGNERS:
                bot.send_message(query.message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–∏–∑–∞–π–Ω–µ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ DESIGNERS –∑ —ó—Ö–Ω—ñ–º–∏ ID.")
                bot.answer_callback_query(query.id)
                return
            kb = types.InlineKeyboardMarkup(row_width=1)
            for name in DESIGNERS.keys():
                kb.add(types.InlineKeyboardButton(name, callback_data=f"send_to|{client_key}|{name}"))
            bot.send_message(query.message.chat.id, "üë§ –ö–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏?", reply_markup=kb)
            bot.answer_callback_query(query.id)
            return

        if action == "send_to":
            # –æ—á—ñ–∫—É—î–º–æ send_to|client_key|Designer Name
            parts = query.data.split("|")
            if len(parts) == 3:
                _, ck, designer = parts
                hist = CLIENTS.get(ck, {}).get("history", [])
                last_msg = hist[-1][1] if hist else "–ë–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
                chat_id = DESIGNERS.get(designer)
                CLIENTS[ck]["designer"] = designer
                if chat_id:
                    bot.send_message(chat_id, f"üßæ –ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è:\n\n{last_msg}")
                    PROJECTS_BY_DESIGNER.setdefault(designer, []).append(last_msg)
                    bot.send_message(query.message.chat.id, f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–∏–∑–∞–π–Ω–µ—Ä—É *{designer}*  #–¥–∏–∑–∞–π–Ω–µ—Ä_{designer}", parse_mode="Markdown")
                else:
                    bot.send_message(query.message.chat.id, f"‚ö†Ô∏è –î–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞ '{designer}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ Telegram ID —É –∑–º—ñ–Ω–Ω—ñ–π DESIGNERS.")
            bot.answer_callback_query(query.id)
            return

        # –§–æ–ª–ª–æ—É-–∞–ø (24h) ‚Äî –ø—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        if action == "followup":
            info = CLIENTS.get(client_key, {})
            last_file = info.get("last_file_sent")
            if last_file and datetime.utcnow() - last_file > timedelta(hours=24):
                bot.send_message(query.message.chat.id, "üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: 24 –≥–æ–¥–∏–Ω–∏ –º–∏–Ω—É–ª–∏ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—É, –∫–ª—ñ—î–Ω—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤.")
            else:
                bot.send_message(query.message.chat.id, "üïì –©–µ –Ω–µ –º–∏–Ω—É–ª–æ 24 –≥–æ–¥ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ñ–∞–π–ª—É –∞–±–æ —Ñ–∞–π–ª –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–≤—Å—è.")
            bot.answer_callback_query(query.id)
            return

        # –ß–µ—Ä–Ω–µ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ø–æ–∫–∏ –±–µ–∑ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É)
        if action == "reply":
            info = CLIENTS.get(client_key, {})
            prof = info.get("profile") or "‚Äî –Ω–µ –≤–∏–±—Ä–∞–Ω–æ ‚Äî"
            bot.send_message(
                query.message.chat.id,
                f"‚úçÔ∏è –ß–µ—Ä–Ω–µ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ø—Ä–æ—Ñ—ñ–ª—å: *{prof}*):\n\n"
                f"Hi! Thanks for your message. We can help with logo/brand identity and packaging. "
                f"Could you share more details: scope, deadlines, examples, and budget?\n\n"
                f"(–Ω–∞—Ç–∏—Å–Ω–∏ *–í–∏–±—Ä–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç*, —â–æ–± —Å—Ç–∏–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—ñ–¥ Yurii/Olena)",
                parse_mode="Markdown"
            )
            bot.answer_callback_query(query.id)
            return
