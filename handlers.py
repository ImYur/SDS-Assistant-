import os, json, re
from datetime import datetime, timedelta
from telebot import types

OWNER_ID = int(os.getenv("OWNER_ID", "0"))
DESIGNERS = json.loads(os.getenv("DESIGNERS", "{}"))
PROFILES = ["Yurii", "Olena"]

# –ü–∞–º'—è—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—ñ
THREADS = {}                # client_name -> dict(...)
PROJECTS_BY_DESIGNER = {}   # designer -> [items]

# --------- –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞/–ø—Ä–æ—î–∫—Ç—É ---------
CLIENT_PATTERNS = [
    r"#client\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"client\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"from\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"(?:best|regards|cheers|thanks|sincerely)\s*,?\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
    r"^‚Äî\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
    r"^-{2,}\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
]
PROJECT_PATTERNS = [
    r"#project\s*:\s*(?P<title>.+)",
    r"project\s*:\s*(?P<title>.+)",
    r"^subject\s*:\s*(?P<title>.+)$"
]

def _norm(s: str) -> str:
    import re as _re
    return _re.sub(r"\s+", " ", s.strip())

def guess_client(text: str):
    import re as _re
    lines = [l.strip() for l in text.splitlines() if l.strip()]
    blob = "\n".join(lines)
    for pat in CLIENT_PATTERNS:
        m = _re.search(pat, blob, _re.IGNORECASE | _re.MULTILINE)
        if m: return _norm(m.group("name"))
    if lines:
        last = lines[-1]
        m = _re.match(r"(?P<name>[A-Za-z][A-Za-z \.\-]{1,40})\s*(?:,|CEO|Founder|Manager|Owner)\b", last)
        if m: return _norm(m.group("name"))
    return None

def guess_project(text: str):
    import re as _re
    for pat in PROJECT_PATTERNS:
        m = _re.search(pat, text, _re.IGNORECASE | _re.MULTILINE)
        if m: return _norm(m.group("title"))
    first = text.splitlines()[0].strip() if text.strip() else ""
    if ":" in first and len(first) <= 120:
        return _norm(first)
    return None

def thread_buttons(client_name):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üéØ –í–∏–±—Ä–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç", callback_data=f"profile|{client_name}"),
        types.InlineKeyboardButton("üßë‚Äçüé® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—É", callback_data=f"to_designer|{client_name}"),
        types.InlineKeyboardButton("üìé –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", callback_data=f"history|{client_name}"),
        types.InlineKeyboardButton("üîî –§–æ–ª–ª–æ—É-–∞–ø (24h)", callback_data=f"followup|{client_name}")
    )
    return kb

def choose_client_buttons(candidates):
    kb = types.InlineKeyboardMarkup(row_width=1)
    for name in candidates:
        kb.add(types.InlineKeyboardButton(f"üìå {name}", callback_data=f"choose_client|{name}"))
    kb.add(types.InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="enter_client"))
    return kb

# =============== HANDLERS ===============
def setup_handlers(bot):

    @bot.message_handler(commands=['health'])
    def health(m):
        bot.reply_to(m, "‚úÖ alive")

    @bot.message_handler(commands=['whoami'])
    def whoami(m):
        bot.reply_to(m, f"Your ID: {m.from_user.id}")

    @bot.message_handler(commands=['start'])
    def start(m):
        bot.reply_to(
            m,
            "üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—Å–∏–ª–∞–π —Ç–µ–∫—Å—Ç –¥—ñ–∞–ª–æ–≥—É –∑ –∫–ª—ñ—î–Ω—Ç–æ–º/—ñ–Ω–≤–∞–π—Ç. "
            "–Ø —Å—Ç–≤–æ—Ä—é/–ø—Ä–æ–¥–æ–≤–∂—É —Ç—Ä–µ–¥ –∑–∞ *—ñ–º–µ–Ω–µ–º –∫–ª—ñ—î–Ω—Ç–∞*, –∞ –Ω–µ –∑–∞ —Ç–≤–æ—ó–º –∞–∫–∞—É–Ω—Ç–æ–º.",
            parse_mode="Markdown"
        )

    # –í–∞–∂–ª–∏–≤–æ: —Ç–∏–º—á–∞—Å–æ–≤–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ –í–°–Ü –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—â–æ–± —Ç–æ—á–Ω–æ —Ä–µ–∞–≥—É–≤–∞–≤)
    def _allow(m):
        return m.chat.type == 'private'

    @bot.message_handler(func=_allow, content_types=['text'])
    def handle_text(m):
        text = m.text or ""

        # 1) –í–∏—Ç—è–≥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞/–ø—Ä–æ—î–∫—Ç –∑ —Ç–µ–∫—Å—Ç—É
        client = guess_client(text)
        project = guess_project(text)

        if client:
            thread = THREADS.setdefault(client, {
                "project": None, "history": [], "profile": None,
                "designer": None, "last_file_sent": None
            })
            if project: thread["project"] = project
            thread["history"].append((datetime.utcnow().isoformat(), text))

            tags = f"#client_{client.replace(' ', '_')}"
            if thread.get("project"):
                tags += f"  #project_{thread['project'].replace(' ', '_')}"
            bot.reply_to(
                m,
                f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ç—Ä–µ–¥ *{client}*.\n{tags}",
                parse_mode="Markdown",
                reply_markup=thread_buttons(client)
            )
            return

        # 2) –Ø–∫—â–æ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–ª–∏ ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∏–±—ñ—Ä —ñ—Å–Ω—É—é—á–∏—Ö –∞–±–æ —Ä—É—á–Ω–∏–π –≤–≤—ñ–¥
        existing = sorted(THREADS.keys())
        if existing:
            bot.reply_to(m, "–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –∫–ª—ñ—î–Ω—Ç–∞. –û–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É:",
                         reply_markup=choose_client_buttons(existing))
        else:
            force = types.ForceReply(input_field_placeholder="–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Acme Inc.)")
            msg = bot.reply_to(m, "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç? (—Å—Ç–≤–æ—Ä—é –Ω–æ–≤–∏–π —Ç—Ä–µ–¥)", reply_markup=force)
            bot.register_for_reply(msg, _set_client_name_step)

    def _set_client_name_step(reply_msg):
        name = (reply_msg.text or "").strip()
        if not name:
            bot.reply_to(reply_msg, "–ü–æ—Ä–æ–∂–Ω—î —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            return
        THREADS.setdefault(name, {"project": None, "history": [], "profile": None, "designer": None, "last_file_sent": None})
        bot.reply_to(reply_msg, f"üÜï –°—Ç–≤–æ—Ä–∏–≤ —Ç—Ä–µ–¥ –¥–ª—è *{name}*. –ù–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ —â–µ —Ä–∞–∑.", parse_mode="Markdown")

    # ---------- CALLBACKS (–±–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä—Å–µ—Ä) ----------
    @bot.callback_query_handler(func=lambda c: True)
    def cb(q):
        data = q.data or ""
        try:
            action, tail = data.split("|", 1)
        except ValueError:
            bot.answer_callback_query(q.id); return

        if action == "choose_client":
            client = tail
            THREADS.setdefault(client, {"project": None, "history": [], "profile": None, "designer": None, "last_file_sent": None})
            bot.edit_message_text(
                f"‚úÖ –û–±—Ä–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: *{client}*. –ù–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –¥–æ–¥–∞–º –≤ —ñ—Å—Ç–æ—Ä—ñ—é.",
                q.message.chat.id, q.message.id, parse_mode="Markdown"
            )
            bot.answer_callback_query(q.id); return

        if action == "enter_client":
            force = types.ForceReply(input_field_placeholder="–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–ª—ñ—î–Ω—Ç–∞")
            msg = bot.send_message(q.message.chat.id, "–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–ª—ñ—î–Ω—Ç–∞:", reply_markup=force)
            bot.register_for_reply(msg, _set_client_name_step)
            bot.answer_callback_query(q.id); return

        if action == "history":
            client = tail
            hist = THREADS.get(client, {}).get("history", [])
            if not hist:
                bot.answer_callback_query(q.id, "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
                return
            text = "\n\n".join([f"{t}:\n{m}" for t, m in hist])[-4000:]
            bot.send_message(q.message.chat.id, f"üïì –Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è *{client}*:\n\n{text}", parse_mode="Markdown")
            bot.answer_callback_query(q.id); return

        if action == "profile":
            client = tail
            kb = types.InlineKeyboardMarkup(row_width=2)
            for p in PROFILES:
                kb.add(types.InlineKeyboardButton(p, callback_data=f"setprofile|{client}|{p}"))
            bot.send_message(q.message.chat.id, f"–î–ª—è *{client}*: –≤–∏–±–µ—Ä–∏ –ø—Ä–æ—Ñ—ñ–ª—å:", parse_mode="Markdown", reply_markup=kb)
            bot.answer_callback_query(q.id); return

        if action == "setprofile":
            try:
                client, prof = tail.split("|", 1)
            except ValueError:
                bot.answer_callback_query(q.id); return
            THREADS.setdefault(client, {"project": None, "history": [], "profile": None, "designer": None, "last_file_sent": None})
            THREADS[client]["profile"] = prof
            bot.send_message(q.message.chat.id, f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å *{prof}* –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è *{client}*  #–ø—Ä–æ—Ñ—ñ–ª—å_{prof}", parse_mode="Markdown")
            bot.answer_callback_query(q.id); return

        if action == "to_designer":
            client = tail
            if not DESIGNERS:
                bot.send_message(q.message.chat.id, "DESIGNERS –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π JSON –∑ —ñ–º–µ–Ω–∞–º–∏ —Ç–∞ Telegram ID.")
                bot.answer_callback_query(q.id); return
            kb = types.InlineKeyboardMarkup(row_width=1)
            for name in DESIGNERS.keys():
                kb.add(types.InlineKeyboardButton(name, callback_data=f"send_to|{client}|{name}"))
            bot.send_message(q.message.chat.id, f"–ö–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç—Ä–µ–¥ *{client}*?", parse_mode="Markdown", reply_markup=kb)
            bot.answer_callback_query(q.id); return

        if action == "send_to":
            try:
                client, designer = tail.split("|", 1)
            except ValueError:
                bot.answer_callback_query(q.id); return
            hist = THREADS.get(client, {}).get("history", [])
            last_msg = hist[-1][1] if hist else "–ë–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
            chat_id = DESIGNERS.get(designer)
            if chat_id:
                PROJECTS_BY_DESIGNER.setdefault(designer, []).append(f"{client}: {last_msg}")
                bot.send_message(chat_id, f"üßæ {client}\n\n{last_msg}")
                bot.send_message(q.message.chat.id, f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ *{designer}*  #–¥–∏–∑–∞–π–Ω–µ—Ä_{designer}", parse_mode="Markdown")
            else:
                bot.send_message(q.message.chat.id, f"‚ö†Ô∏è –î–ª—è '{designer}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ Telegram ID —É DESIGNERS.")
            bot.answer_callback_query(q.id); return

        if action == "followup":
            client = tail
            info = THREADS.get(client, {})
            last_file = info.get("last_file_sent")
            if last_file and datetime.utcnow() - last_file > timedelta(hours=24):
                bot.send_message(q.message.chat.id, f"üîî 24 –≥–æ–¥–∏–Ω–∏ –º–∏–Ω—É–ª–∏: –Ω–∞–≥–∞–¥–∞–π –∫–ª—ñ—î–Ω—Ç—É *{client}*.")
            else:
                bot.send_message(q.message.chat.id, "üïì –©–µ –Ω–µ –º–∏–Ω—É–ª–æ 24 –≥–æ–¥ –∞–±–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–≤—Å—è.")
            bot.answer_callback_query(q.id); return
