import os, json, re
from datetime import datetime, timedelta
from telebot import types

OWNER_ID = int(os.getenv("OWNER_ID", "0"))
DESIGNERS = json.loads(os.getenv("DESIGNERS", "{}"))
MANAGERS = {OWNER_ID}  # –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —â–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
PROFILES = ["Yurii", "Olena"]

# –ü–∞–º'—è—Ç—å (in‚Äëmemory)
THREADS = {}  # key: client_name -> {"project": str|None, "history": [...], "profile":..., "designer":..., "last_file_sent": dt}
PROJECTS_BY_DESIGNER = {}

# ---------- —É—Ç–∏–ª—ñ—Ç–∏ ----------

CLIENT_PATTERNS = [
    r"#client\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"client\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"from\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"(?:best|regards|cheers|thanks|sincerely)\s*,?\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
    r"^‚Äî\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
    r"^-{2,}\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
]

PROJECT_PATTERNS = [
    r"#project\s*:\s*(?P<title>.+)",
    r"project\s*:\s*(?P<title>.+)",
    r"^subject\s*:\s*(?P<title>.+)$"
]

def _norm(s: str) -> str:
    return re.sub(r"\s+", " ", s.strip())

def guess_client(text: str):
    lines = [l.strip() for l in text.splitlines() if l.strip()]
    blob = "\n".join(lines)

    for pat in CLIENT_PATTERNS:
        m = re.search(pat, blob, re.IGNORECASE | re.MULTILINE)
        if m:
            return _norm(m.group("name"))
    # –ø—Ä–æ—Å—Ç–µ –µ–≤—Ä–∏—Å—Ç–∏—á–Ω–µ: —è–∫—â–æ —î –ø—ñ–¥–ø–∏—Å —É –∫—ñ–Ω—Ü—ñ ‚ÄúName, Title‚Äù
    if lines:
        last = lines[-1]
        m = re.match(r"(?P<name>[A-Za-z][A-Za-z \.\-]{1,40})\s*(?:,|CEO|Founder|Manager|Owner)\b", last)
        if m:
            return _norm(m.group("name"))
    return None

def guess_project(text: str):
    blob = text
    for pat in PROJECT_PATTERNS:
        m = re.search(pat, blob, re.IGNORECASE | re.MULTILINE)
        if m:
            return _norm(m.group("title"))
    # —è–∫—â–æ –≤ –ø–µ—Ä—à–æ–º—É —Ä—è–¥–∫—É —î ¬´:¬ª ‚Äî –±–µ—Ä–µ–º–æ —è–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    first = text.splitlines()[0].strip() if text.strip() else ""
    if ":" in first and len(first) <= 120:
        return _norm(first)
    return None

def thread_buttons(client_name):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üéØ –í–∏–±—Ä–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç", callback_data=f"profile|{client_name}"),
        types.InlineKeyboardButton("üßë‚Äçüé® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—É", callback_data=f"to_designer|{client_name}"),
        types.InlineKeyboardButton("üìé –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", callback_data=f"history|{client_name}"),
        types.InlineKeyboardButton("üîî –§–æ–ª–ª–æ—É-–∞–ø (24h)", callback_data=f"followup|{client_name}")
    )
    return kb

def choose_client_buttons(candidates):
    kb = types.InlineKeyboardMarkup(row_width=1)
    for name in candidates:
        kb.add(types.InlineKeyboardButton(f"üìå {name}", callback_data=f"choose_client|{name}"))
    kb.add(types.InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="enter_client"))
    return kb

# ---------- –æ—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ ----------

def setup_handlers(bot):

    @bot.message_handler(commands=['start'])
    def handle_start(message):
        bot.reply_to(message, "üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—Å–∏–ª–∞–π —Ç–µ–∫—Å—Ç –¥—ñ–∞–ª–æ–≥—É –∑ –∫–ª—ñ—î–Ω—Ç–æ–º/—ñ–Ω–≤–∞–π—Ç ‚Äî —è —Å—Ç–≤–æ—Ä—é –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂—É —Ç—Ä–µ–¥ –ø–æ *–∫–ª—ñ—î–Ω—Ç—É*, –∞ –Ω–µ –ø–æ —Ç–≤–æ—î–º—É –∞–∫–∞—É–Ω—Ç—É.", parse_mode="Markdown")

    @bot.message_handler(commands=['projects_by'])
    def projects_by(message):
        parts = message.text.split(maxsplit=1)
        if len(parts) == 1:
            bot.reply_to(message, "–í–∫–∞–∂–∏ —ñ–º‚Äô—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –ü—Ä–∏–∫–ª–∞–¥: `/projects_by Yaryna`", parse_mode="Markdown")
            return
        name = parts[1].strip()
        items = PROJECTS_BY_DESIGNER.get(name, [])
        if items:
            bot.reply_to(message, "üìã –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è *{}*:\n\n{}".format(name, "\n\n".join(items[-10:])), parse_mode="Markdown")
        else:
            bot.reply_to(message, f"üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è {name}.")

    # –≥–æ–ª–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä —Ç–µ–∫—Å—Ç—É –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    @bot.message_handler(func=lambda m: m.from_user.id in MANAGERS, content_types=['text'])
    def handle_manager_text(message):
        text = message.text or ""
        # 1) —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞/–ø—Ä–æ—î–∫—Ç —ñ–∑ —Ç–µ–∫—Å—Ç—É
        client = guess_client(text)
        project = guess_project(text)

        if client:
            client_key = client
            thread = THREADS.setdefault(client_key, {"project": None, "history": [], "profile": None, "designer": None, "last_file_sent": None})
            if project:
                thread["project"] = project
            thread["history"].append((datetime.utcnow().isoformat(), text))

            tags = f"#client_{client.replace(' ', '_')}"
            if thread.get("project"):
                tags += f"  #project_{thread['project'].replace(' ', '_')}"
            bot.reply_to(
                message,
                f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ç—Ä–µ–¥ *{client}*.\n{tags}",
                parse_mode="Markdown",
                reply_markup=thread_buttons(client_key)
            )
            return

        # 2) —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –∑ —ñ—Å–Ω—É—é—á–∏—Ö + ‚Äú–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É‚Äù
        existing = sorted(THREADS.keys())
        if existing:
            bot.reply_to(message, "–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –∫–ª—ñ—î–Ω—Ç–∞. –û–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É:", reply_markup=choose_client_buttons(existing))
        else:
            # –Ω–µ–º–∞—î —Ç—Ä–µ–¥—ñ–≤ ‚Äî –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —ñ–º'—è
            force = types.ForceReply(selective=False, input_field_placeholder="–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Acme Inc.)")
            m = bot.reply_to(message, "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç? (–±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ç—Ä–µ–¥)", reply_markup=force)
            bot.register_for_reply(m, _set_client_name_step)

    # –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –≤—Ä—É—á–Ω—É (ForceReply)
    def _set_client_name_step(reply_msg):
        name = reply_msg.text.strip()
        if not name:
            bot.reply_to(reply_msg, "–ü–æ—Ä–æ–∂–Ω—î —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            return
        THREADS.setdefault(name, {"project": None, "history": [], "profile": None, "designer": None, "last_file_sent": None})
        bot.reply_to(reply_msg, f"üÜï –°—Ç–≤–æ—Ä–∏–≤ —Ç—Ä–µ–¥ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ *{name}*.\n–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ —â–µ —Ä–∞–∑ ‚Äî —è –¥–æ–¥–∞–º —É —Ü–µ–π —Ç—Ä–µ–¥.", parse_mode="Markdown")

    # ---------- callbacks ----------

    @bot.callback_query_handler(func=lambda c: c.data.startswith("choose_client|"))
    def cb_choose_client(query):
        _, client_name = query.data.split("|", 1)
        THREADS.setdefault(client_name, {"project": None, "history": [], "profile": None, "designer": None, "last_file_sent": None})
        bot.edit_message_text(
            f"‚úÖ –û–±—Ä–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: *{client_name}*.\n–ù–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî —è –¥–æ–¥–∞–º –π–æ–≥–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é.",
            chat_id=query.message.chat.id, message_id=query.message.id, parse_mode="Markdown"
        )
        bot.answer_callback_query(query.id)

    @bot.callback_query_handler(func=lambda c: c.data == "enter_client")
    def cb_enter_client(query):
        force = types.ForceReply(selective=False, input_field_placeholder="–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–ª—ñ—î–Ω—Ç–∞")
        m = bot.send_message(query.message.chat.id, "–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–ª—ñ—î–Ω—Ç–∞:", reply_markup=force)
        bot.register_for_reply(m, _set_client_name_step)
        bot.answer_callback_query(query.id)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("history|"))
    def cb_history(query):
        client_name = query.data.split("|", 1)[1]
        hist = THREADS.get(client_name, {}).get("history", [])
        if not hist:
            bot.answer_callback_query(query.id, "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
            return
        text = "\n\n".join([f"{t}:\n{m}" for t, m in hist])[-4000:]
        bot.send_message(query.message.chat.id, f"üïì –Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è *{client_name}*:\n\n{text}", parse_mode="Markdown")
        bot.answer_callback_query(query.id)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("profile|"))
    def cb_profile(query):
        client_name = query.data.split("|", 1)[1]
        kb = types.InlineKeyboardMarkup(row_width=2)
        for p in PROFILES:
            kb.add(types.InlineKeyboardButton(p, callback_data=f"setprofile|{client_name}|{p}"))
        bot.send_message(query.message.chat.id, f"–î–ª—è *{client_name}*: –≤–∏–±–µ—Ä–∏ –ø—Ä–æ—Ñ—ñ–ª—å:", parse_mode="Markdown", reply_markup=kb)
        bot.answer_callback_query(query.id)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("setprofile|"))
    def cb_setprofile(query):
        _, client_name, prof = query.data.split("|", 2)
        THREADS.setdefault(client_name, {"project": None, "history": [], "profile": None, "designer": None, "last_file_sent": None})
        THREADS[client_name]["profile"] = prof
        bot.send_message(query.message.chat.id, f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å *{prof}* –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è *{client_name}*  #–ø—Ä–æ—Ñ—ñ–ª—å_{prof}", parse_mode="Markdown")
        bot.answer_callback_query(query.id)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("to_designer|"))
    def cb_to_designer(query):
        client_name = query.data.split("|", 1)[1]
        if not DESIGNERS:
            bot.send_message(query.message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–∏–∑–∞–π–Ω–µ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π (ENV `DESIGNERS`).")
            bot.answer_callback_query(query.id); return
        kb = types.InlineKeyboardMarkup(row_width=1)
        for name in DESIGNERS.keys():
            kb.add(types.InlineKeyboardButton(name, callback_data=f"send_to|{client_name}|{name}"))
        bot.send_message(query.message.chat.id, f"–ö–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç—Ä–µ–¥ *{client_name}*?", parse_mode="Markdown", reply_markup=kb)
        bot.answer_callback_query(query.id)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("send_to|"))
    def cb_send_to(query):
        _, client_name, designer = query.data.split("|", 2)
        hist = THREADS.get(client_name, {}).get("history", [])
        last_msg = hist[-1][1] if hist else "–ë–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
        chat_id = DESIGNERS.get(designer)
        if chat_id:
            PROJECTS_BY_DESIGNER.setdefault(designer, []).append(f"{client_name}: {last_msg}")
            bot.send_message(chat_id, f"üßæ {client_name}\n\n{last_msg}")
            bot.send_message(query.message.chat.id, f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ *{designer}*  #–¥–∏–∑–∞–π–Ω–µ—Ä_{designer}", parse_mode="Markdown")
        else:
            bot.send_message(query.message.chat.id, f"‚ö†Ô∏è –î–ª—è '{designer}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ Telegram ID —É `DESIGNERS`.")
        bot.answer_callback_query(query.id)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("followup|"))
    def cb_followup(query):
        client_name = query.data.split("|", 1)[1]
        info = THREADS.get(client_name, {})
        last_file = info.get("last_file_sent")
        if last_file and datetime.utcnow() - last_file > timedelta(hours=24):
            bot.send_message(query.message.chat.id, f"üîî 24 –≥–æ–¥–∏–Ω–∏ –º–∏–Ω—É–ª–∏: –Ω–∞–≥–∞–¥–∞–π –∫–ª—ñ—î–Ω—Ç—É *{client_name}*.")
        else:
            bot.send_message(query.message.chat.id, "üïì –©–µ –Ω–µ –º–∏–Ω—É–ª–æ 24 –≥–æ–¥ –∞–±–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–≤—Å—è.")
        bot.answer_callback_query(query.id)
