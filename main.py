import os, re, json
from datetime import datetime, timedelta
import telebot
from telebot import types

# ========= ENV =========
TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))        # –û–î–ù–ê —Å—É–ø–µ—Ä–≥—Ä—É–ø–∞ (—ñ ‚Äúcold‚Äù, —ñ ‚Äú—Ç–µ–ø–ª—ñ‚Äù)
DESIGNERS = json.loads(os.getenv("DESIGNERS", "{}"))        # {"Yaryna":"111", ...}
OWNER_ID = int(os.getenv("OWNER_ID", "0") or "0")

# –¢—Ä–µ–¥ ‚ÄúCold ‚Äî Inbox‚Äù —É –¢–Ü–ô –ñ–ï –≥—Ä—É–ø—ñ
COLD_INBOX_TOPIC = os.getenv("COLD_INBOX_TOPIC")            # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "5" (id —Ç—Ä–µ–¥—É)

if not TOKEN:
    raise RuntimeError("ENV BOT_TOKEN is missing")
if not GROUP_CHAT_ID:
    raise RuntimeError("ENV GROUP_CHAT_ID is missing")

bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")  # –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º

# ========= STATE =========
THREADS = {}               # warm: client -> {...}
CURRENT_CLIENT = {}        # user_id -> client
PROJECTS_BY_DESIGNER = {}  # designer -> [...]
TOPIC_TITLE_CACHE = {}     # title -> topic_id
PROFILES = ["Yurii", "Olena"]

# cold inbox (–≤ –æ–¥–Ω—ñ–π –≥—Ä—É–ø—ñ)
LEADS = {}                 # lead_id(=message_id) -> {"client","text","profile","status","created_ts"}

# ========= HELPERS =========
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üÜï –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç", "üìÇ –Ü—Å—Ç–æ—Ä—ñ—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏")
    kb.row("üßµ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É", "üßë‚Äçüé® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—É")
    kb.row("üìã –ê–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç")
    kb.row("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É")
    return kb

def topic_link(group_id, topic_id):
    gid = str(group_id)
    abs_id = gid.replace("-100", "") if gid.startswith("-100") else str(abs(group_id))
    return f"https://t.me/c/{abs_id}/{topic_id}"

def md2_escape(s: str) -> str:
    if s is None: return ""
    s = s.replace("\\", "\\\\")
    for ch in ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']:
        s = s.replace(ch, '\\' + ch)
    return s

def ensure_client(client):
    return THREADS.setdefault(client, {
        "project": None,
        "history": [],
        "profile": None,
        "designer": None,
        "topic_id": None,
        "status": "active",
        "last_file_sent": None
    })

def ensure_topic_for_client(client, project_title=None):
    info = ensure_client(client)
    if info.get("topic_id"):
        return info["topic_id"]

    title = client if not project_title else f"{client} ¬∑ {project_title}"
    if title in TOPIC_TITLE_CACHE:
        info["topic_id"] = TOPIC_TITLE_CACHE[title]
        return info["topic_id"]

    topic = bot.create_forum_topic(chat_id=GROUP_CHAT_ID, name=title)
    tid = topic.message_thread_id
    info["topic_id"] = tid
    TOPIC_TITLE_CACHE[title] = tid
    bot.send_message(GROUP_CHAT_ID, f"üßµ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ–º—É –¥–ª—è *{md2_escape(client)}*.", message_thread_id=tid, parse_mode="MarkdownV2")
    return tid

def push_to_topic(client, text):
    info = ensure_client(client)
    if not info.get("topic_id"):
        ensure_topic_for_client(client, info.get("project"))
    safe = md2_escape(text)
    bot.send_message(GROUP_CHAT_ID, f"‚úâÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä:\n\n{safe}", message_thread_id=info["topic_id"], parse_mode="MarkdownV2")

def thread_buttons(client):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üéØ –í–∏–±—Ä–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç", callback_data=f"profile|{client}"),
        types.InlineKeyboardButton("üßë‚Äçüé® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—É", callback_data=f"to_designer|{client}"),
        types.InlineKeyboardButton("üìé –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", callback_data=f"history|{client}"),
        types.InlineKeyboardButton("üîî –§–æ–ª–ª–æ—É-–∞–ø (24h)", callback_data=f"followup|{client}")
    )
    if THREADS.get(client, {}).get("topic_id"):
        kb.add(types.InlineKeyboardButton("üßµ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É", url=topic_link(GROUP_CHAT_ID, THREADS[client]["topic_id"])))
    return kb

def choose_client_inline(cands):
    kb = types.InlineKeyboardMarkup(row_width=1)
    for name in cands:
        kb.add(types.InlineKeyboardButton(f"üìå {name}", callback_data=f"choose_client|{name}"))
    kb.add(types.InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="enter_client"))
    return kb

# ========= Heuristics =========
CLIENT_PATTERNS = [
    r"#client\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"client\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"from\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"(?:best|regards|cheers|thanks|sincerely)\s*,?\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
    r"^‚Äî\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
    r"^-{2,}\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
]
PROJECT_PATTERNS = [
    r"#project\s*:\s*(?P<title>.+)",
    r"project\s*:\s*(?P<title>.+)",
    r"^subject\s*:\s*(?P<title>.+)$"
]

def _norm(s): return re.sub(r"\s+", " ", s.strip())

def guess_client(text):
    lines = [l.strip() for l in text.splitlines() if l.strip()]
    blob = "\n".join(lines)
    for pat in CLIENT_PATTERNS:
        m = re.search(pat, blob, re.IGNORECASE | re.MULTILINE)
        if m: return _norm(m.group("name"))
    if lines:
        last = lines[-1]
        m = re.match(r"(?P<name>[A-Za-z][A-Za-z \.\-]{1,40})\s*(?:,|CEO|Founder|Manager|Owner)\b", last)
        if m: return _norm(m.group("name"))
    return None

def guess_project(text):
    for pat in PROJECT_PATTERNS:
        m = re.search(pat, text, re.IGNORECASE | re.MULTILINE)
        if m: return _norm(m.group("title"))
    first = text.splitlines()[0].strip() if text.strip() else ""
    if ":" in first and len(first) <= 120:
        return _norm(first)
    return None

def in_cold_inbox(msg):
    return (str(msg.chat.id) == str(GROUP_CHAT_ID)) and (str(msg.message_thread_id or "") == str(COLD_INBOX_TOPIC))

# ========= Commands =========
@bot.message_handler(commands=['start'])
def start_cmd(m):
    bot.send_message(m.chat.id, "üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ö–∏–¥–∞–π —Ç–µ–∫—Å—Ç –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî —Å—Ç–≤–æ—Ä—é —Ç–µ–º—É —ñ –∑–±–µ—Ä–µ–∂—É —ñ—Å—Ç–æ—Ä—ñ—é.", reply_markup=main_menu())

@bot.message_handler(commands=['health'])
def health(m): bot.reply_to(m, "‚úÖ alive", reply_markup=main_menu())

@bot.message_handler(commands=['whoami'])
def whoami(m): bot.reply_to(m, f"Your ID: {m.from_user.id}", reply_markup=main_menu())

@bot.message_handler(commands=['getchatid'])
def get_chat_id(m): bot.reply_to(m, f"chat.id = {m.chat.id}", reply_markup=main_menu())

# –±–µ–∑ Markdown, —â–æ–± –Ω–µ –ª–∞–º–∞–≤—Å—è _
@bot.message_handler(commands=['debug_here'])
def debug_here(m):
    txt = f"chat.id={m.chat.id}\nthread_id={getattr(m,'message_thread_id',None)}\nfrom_user={m.from_user.id}"
    bot.send_message(m.chat.id, txt, parse_mode=None)

@bot.message_handler(commands=['projects_by'])
def projects_by(m):
    parts = m.text.split(maxsplit=1)
    if len(parts) == 1:
        bot.reply_to(m, "–í–∫–∞–∂–∏ —ñ–º‚Äô—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –ü—Ä–∏–∫–ª–∞–¥: `/projects_by Yaryna`", parse_mode="Markdown", reply_markup=main_menu()); return
    name = parts[1].strip()
    items = PROJECTS_BY_DESIGNER.get(name, [])
    if items:
        bot.reply_to(m, "üìã –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è *{}*:\n\n{}".format(name, "\n\n".join(items[-10:])), parse_mode="Markdown", reply_markup=main_menu())
    else:
        bot.reply_to(m, f"üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è {name}.", reply_markup=main_menu())

# ========= COLD (–≤ –æ–¥–Ω—ñ–π –≥—Ä—É–ø—ñ, —Ç–µ–º–∞ ‚ÄúCold ‚Äî Inbox‚Äù) =========
@bot.message_handler(func=lambda m: in_cold_inbox(m), content_types=['text'])
def cold_inbox(m):
    text = m.text or ""
    # –¥–æ–∑–≤–æ–ª–∏–º–æ —Ç—Ä–∏–≥–µ—Ä –ø–æ —Ö–µ—à—Ç–µ–≥—É #cold –∞–±–æ –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç —É —Ü—ñ–π —Ç–µ–º—ñ
    if "#cold" in text.lower() or True:
        lead_id = m.message_id
        client = guess_client(text) or "(–±–µ–∑ —ñ–º–µ–Ω—ñ)"
        LEADS[lead_id] = {
            "client": client,
            "text": text,
            "profile": None,
            "status": "new",
            "created_ts": datetime.utcnow().isoformat(),
        }
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("Yurii", callback_data=f"cold_setprof|{lead_id}|Yurii"),
            types.InlineKeyboardButton("Olena", callback_data=f"cold_setprof|{lead_id}|Olena"),
        )
        kb.add(types.InlineKeyboardButton("üßµ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç‚Äë—Ç—Ä–µ–¥", callback_data=f"cold_convert|{lead_id}"))
        bot.reply_to(m, f"üìå –õ—ñ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ (id={lead_id}). –ö–ª—ñ—î–Ω—Ç: *{md2_escape(client)}*.\n–í–∏–±–µ—Ä–∏ –ø—Ä–æ—Ñ—ñ–ª—å —Ç–∞/–∞–±–æ —Å—Ç–≤–æ—Ä–∏ —Ç—Ä–µ–¥.", reply_markup=kb, parse_mode="MarkdownV2")

# ========= WARM (–ø—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏ —ñ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º) =========
@bot.message_handler(func=lambda m: True, content_types=['text'])
def any_text(m):
    # —É –≥—Ä—É–ø—ñ –æ–±—Ä–æ–±–ª—è—î–º–æ –ª–∏—à–µ Cold ‚Äî Inbox; —ñ–Ω—à—ñ –≥—Ä—É–ø–æ–≤—ñ —ñ–≥–Ω–æ—Ä—É—î–º–æ
    if m.chat.type in ("group", "supergroup"):
        return

    text = m.text or ""
    current = CURRENT_CLIENT.get(m.from_user.id)
    if current:
        info = ensure_client(current)
        info["history"].append((datetime.utcnow().isoformat(), text))
        if len(text.strip()) < 3:
            bot.reply_to(m, f"‚úÖ –¢—Ä–µ–¥ *{current}* –≤–∏–±—Ä–∞–Ω–æ. –ö–∏–Ω—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞.", reply_markup=thread_buttons(current))
            return
        try:
            ensure_topic_for_client(current, info.get("project"))
            push_to_topic(current, text)
        except Exception:
            pass
        bot.reply_to(m, f"‚úÖ –î–æ–¥–∞–Ω–æ –≤ —Ç—Ä–µ–¥ *{current}*.", reply_markup=thread_buttons(current))
        return

    client = guess_client(text)
    project = guess_project(text)
    if client:
        info = ensure_client(client)
        if project: info["project"] = project
        info["history"].append((datetime.utcnow().isoformat(), text))
        CURRENT_CLIENT[m.from_user.id] = client
        try:
            tid = ensure_topic_for_client(client, info.get("project"))
            link = topic_link(GROUP_CHAT_ID, tid)
            kb = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üßµ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É", url=link))
            bot.reply_to(m, f"‚úÖ –°—Ç–≤–æ—Ä–∏–≤/–æ–Ω–æ–≤–∏–≤ —Ç—Ä–µ–¥ *{client}*.", reply_markup=main_menu())
            bot.send_message(m.chat.id, "–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ—Ö—ñ–¥:", reply_markup=kb)
        except Exception:
            bot.reply_to(m, f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ç—Ä–µ–¥ *{client}*.", reply_markup=thread_buttons(client))
        return

    existing = sorted(THREADS.keys())
    if existing:
        bot.reply_to(m, "–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –∫–ª—ñ—î–Ω—Ç–∞. –û–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É:", reply_markup=choose_client_inline(existing))
    else:
        msg = bot.reply_to(m, "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç? (–±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ç—Ä–µ–¥)", reply_markup=types.ForceReply())
        bot.register_for_reply(msg, _set_client_name_step)

def _set_client_name_step(reply_msg):
    name = (reply_msg.text or "").strip()
    if not name:
        bot.reply_to(reply_msg, "–ü–æ—Ä–æ–∂–Ω—î —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", reply_markup=main_menu()); return
    ensure_client(name)
    CURRENT_CLIENT[reply_msg.from_user.id] = name
    try:
        tid = ensure_topic_for_client(name, THREADS[name].get("project"))
        link = topic_link(GROUP_CHAT_ID, tid)
        kb = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üßµ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É", url=link))
        bot.reply_to(reply_msg, f"üÜï –°—Ç–≤–æ—Ä–∏–≤ –∫–ª—ñ—î–Ω—Ç–∞ *{name}*. –ö–∏–Ω—å –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=main_menu())
        bot.send_message(reply_msg.chat.id, "–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ—Ö—ñ–¥:", reply_markup=kb)
    except Exception as e:
        bot.reply_to(reply_msg, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–º—É: {e}", reply_markup=main_menu())

# ========= CALLBACKS =========
@bot.callback_query_handler(func=lambda c: True)
def cb(q):
    data = (q.data or "").split("|")
    action = data[0]

    # ----- warm -----
    if action == "choose_client":
        client = data[1]
        ensure_client(client)
        CURRENT_CLIENT[q.from_user.id] = client
        bot.edit_message_text(f"‚úÖ –û–±—Ä–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: *{md2_escape(client)}*. –ù–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –¥–æ–¥–∞–º –≤ —ñ—Å—Ç–æ—Ä—ñ—é.",
                              q.message.chat.id, q.message.id, parse_mode="MarkdownV2")
        bot.answer_callback_query(q.id); return

    if action == "enter_client":
        msg = bot.send_message(q.message.chat.id, "–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–ª—ñ—î–Ω—Ç–∞:", reply_markup=types.ForceReply())
        bot.register_for_reply(msg, _set_client_name_step)
        bot.answer_callback_query(q.id); return

    if action == "history":
        client = data[1]
        hist = THREADS.get(client, {}).get("history", [])
        if not hist:
            bot.answer_callback_query(q.id, "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è."); return
        body = "\n\n".join([f"{t}:\n{m}" for t,m in hist])[-3800:]
        bot.send_message(q.message.chat.id, f"üïì –Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è *{md2_escape(client)}*:\n\n{md2_escape(body)}", parse_mode="MarkdownV2")
        bot.answer_callback_query(q.id); return

    if action == "profile":
        client = data[1]
        kb = types.InlineKeyboardMarkup(row_width=2)
        for p in PROFILES:
            kb.add(types.InlineKeyboardButton(p, callback_data=f"setprofile|{client}|{p}"))
        bot.send_message(q.message.chat.id, f"–î–ª—è *{md2_escape(client)}*: –≤–∏–±–µ—Ä–∏ –ø—Ä–æ—Ñ—ñ–ª—å:", reply_markup=kb, parse_mode="MarkdownV2")
        bot.answer_callback_query(q.id); return

    if action == "setprofile":
        _, client, prof = data
        ensure_client(client); THREADS[client]["profile"] = prof
        bot.send_message(q.message.chat.id, f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å *{md2_escape(prof)}* –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è *{md2_escape(client)}*", parse_mode="MarkdownV2")
        bot.answer_callback_query(q.id); return

    if action == "to_designer":
        client = data[1]
        if not DESIGNERS:
            bot.send_message(q.message.chat.id, "DESIGNERS –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π JSON –∑ —ñ–º–µ–Ω–∞–º–∏ —Ç–∞ Telegram ID.")
            bot.answer_callback_query(q.id); return
        kb = types.InlineKeyboardMarkup(row_width=1)
        for name in DESIGNERS.keys():
            kb.add(types.InlineKeyboardButton(name, callback_data=f"send_to|{client}|{name}"))
        bot.send_message(q.message.chat.id, f"–ö–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç—Ä–µ–¥ *{md2_escape(client)}*?", reply_markup=kb, parse_mode="MarkdownV2")
        bot.answer_callback_query(q.id); return

    if action == "send_to":
        _, client, designer = data
        hist = THREADS.get(client, {}).get("history", [])
        last_msg = hist[-1][1] if hist else "–ë–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
        chat_id = DESIGNERS.get(designer)
        if chat_id:
            PROJECTS_BY_DESIGNER.setdefault(designer, []).append(f"{client}: {last_msg}")
            bot.send_message(chat_id, f"üßæ {md2_escape(client)}\n\n{md2_escape(last_msg)}", parse_mode="MarkdownV2")
            bot.send_message(q.message.chat.id, f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ *{md2_escape(designer)}*", parse_mode="MarkdownV2")
        else:
            bot.send_message(q.message.chat.id, f"‚ö†Ô∏è –î–ª—è '{designer}' –Ω–µ–º–∞—î Telegram ID —É ENV DESIGNERS.")
        bot.answer_callback_query(q.id); return

    if action == "followup":
        client = data[1]
        info = THREADS.get(client, {})
        last_file = info.get("last_file_sent")
        if last_file and datetime.utcnow() - last_file > timedelta(hours=24):
            bot.send_message(q.message.chat.id, f"üîî 24 –≥–æ–¥–∏–Ω–∏ –º–∏–Ω—É–ª–∏: –Ω–∞–≥–∞–¥–∞–π –∫–ª—ñ—î–Ω—Ç—É *{md2_escape(client)}*.", parse_mode="MarkdownV2")
        else:
            bot.send_message(q.message.chat.id, "üïì –©–µ –Ω–µ –º–∏–Ω—É–ª–æ 24 –≥–æ–¥ –∞–±–æ —Ñ–∞–π–ª –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–≤—Å—è.")
        bot.answer_callback_query(q.id); return

    if action == "close":
        client = data[1]
        if client in THREADS:
            THREADS[client]["status"] = "closed"
            bot.send_message(q.message.chat.id, f"‚úÖ –¢—Ä–µ–¥ *{md2_escape(client)}* –∑–∞–∫—Ä–∏—Ç–æ.", parse_mode="MarkdownV2")
        bot.answer_callback_query(q.id); return

    # ----- COLD -----
    if action == "cold_setprof":
        _, lead_id, prof = data
        lead_id = int(lead_id)
        lead = LEADS.get(lead_id)
        if not lead:
            bot.answer_callback_query(q.id, "–õ—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."); return
        lead["profile"] = prof
        bot.edit_message_text(f"–õ—ñ–¥ id={lead_id}. –ü—Ä–æ—Ñ—ñ–ª—å: *{md2_escape(prof)}*.\n–ì–æ—Ç–æ–≤–æ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É.",
                              q.message.chat.id, q.message.id, parse_mode="MarkdownV2")
        bot.answer_callback_query(q.id); return

    if action == "cold_convert":
        _, lead_id = data
        lead_id = int(lead_id)
        lead = LEADS.get(lead_id)
        if not lead:
            bot.answer_callback_query(q.id, "–õ—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."); return

        client = lead["client"] if lead["client"] != "(–±–µ–∑ —ñ–º–µ–Ω—ñ)" else f"Lead {lead_id}"
        tid = ensure_topic_for_client(client)
        summary = (
            f"*Lead ‚Üí Project*\n"
            f"‚Ä¢ ID: `{lead_id}`\n"
            f"‚Ä¢ Client: *{md2_escape(client)}*\n"
            f"‚Ä¢ Profile: *{md2_escape(lead.get('profile') or '‚Äî')}*\n"
            f"‚Ä¢ Created: `{lead['created_ts']}`\n\n"
            f"{md2_escape(lead['text'])}"
        )
        bot.send_message(GROUP_CHAT_ID, summary, message_thread_id=tid, parse_mode="MarkdownV2")

        lead["status"] = "archived"
        link = topic_link(GROUP_CHAT_ID, tid)
        bot.edit_message_text(f"‚úÖ –ü—Ä–æ—î–∫—Ç‚Äë—Ç—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {link}", q.message.chat.id, q.message.id, disable_web_page_preview=True)
        bot.answer_callback_query(q.id); return

# ========= RUN =========
print(f"Bot is starting‚Ä¶ GROUP_CHAT_ID={GROUP_CHAT_ID} COLD_INBOX_TOPIC={COLD_INBOX_TOPIC}")
bot.infinity_polling(skip_pending=True, timeout=60, long_polling_timeout=60)
