import os, re, json
from datetime import datetime, timedelta
import telebot
from telebot import types

# ========= ENV =========
TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))       # SDS Projekts (—Ç–µ–ø–ª—ñ)
DESIGNERS = json.loads(os.getenv("DESIGNERS", "{}"))
OWNER_ID = int(os.getenv("OWNER_ID", "0") or "0")

# ----- COLD (–æ–∫—Ä–µ–º–∞ –≥—Ä—É–ø–∞ + –æ–¥–Ω–∞ —Ç–µ–º–∞ Inbox) -----
COLD_GROUP_ID = int(os.getenv("COLD_GROUP_ID", "0"))       # SDS Cold Leads
COLD_INBOX_TOPIC = os.getenv("COLD_INBOX_TOPIC")           # message_thread_id —Ç–µ–º–∏ "Cold ‚Äî Inbox" (—Å—Ç—Ä–æ–∫–∞ –∞–±–æ —á–∏—Å–ª–æ)

if not TOKEN:
    raise RuntimeError("ENV BOT_TOKEN is missing")

bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")

# ========= STATE =========
THREADS = {}                 # client -> {...}
CURRENT_CLIENT = {}          # user_id -> client
PROJECTS_BY_DESIGNER = {}    # designer -> ["Client: last msg", ...]
TOPIC_TITLE_CACHE = {}       # title -> topic_id (–∞–Ω—Ç–∏–¥—É–±–ª—é–≤–∞–Ω–Ω—è)
PROFILES = ["Yurii", "Olena"]

# ========= UI =========
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üÜï –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç", "üìÇ –Ü—Å—Ç–æ—Ä—ñ—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏")
    kb.row("üßµ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É", "üßë‚Äçüé® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—É")
    kb.row("üìã –ê–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç")
    kb.row("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É")
    return kb

# ========= Utils (—Ç–µ–ø–ª—ñ) =========
def topic_link(group_id, topic_id):
    gid = str(group_id)
    abs_id = gid.replace("-100", "") if gid.startswith("-100") else str(abs(group_id))
    return f"https://t.me/c/{abs_id}/{topic_id}"

def ensure_client(client):
    return THREADS.setdefault(client, {
        "project": None,
        "history": [],
        "profile": None,
        "designer": None,
        "topic_id": None,
        "status": "active",
        "last_file_sent": None
    })

def ensure_topic_for_client(client, project_title=None):
    info = ensure_client(client)
    if info.get("topic_id"):
        return info["topic_id"]
    if not GROUP_CHAT_ID:
        raise RuntimeError("ENV GROUP_CHAT_ID is missing")

    title = client if not project_title else f"{client} ¬∑ {project_title}"
    if title in TOPIC_TITLE_CACHE:
        info["topic_id"] = TOPIC_TITLE_CACHE[title]
        return info["topic_id"]

    topic = bot.create_forum_topic(chat_id=GROUP_CHAT_ID, name=title)
    topic_id = topic.message_thread_id
    info["topic_id"] = topic_id
    TOPIC_TITLE_CACHE[title] = topic_id

    bot.send_message(GROUP_CHAT_ID, f"üßµ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ–º—É –¥–ª—è *{client}*.", message_thread_id=topic_id)
    return topic_id

def push_to_topic(client, text):
    info = ensure_client(client)
    if not info.get("topic_id"):
        ensure_topic_for_client(client, info.get("project"))
    bot.send_message(GROUP_CHAT_ID, f"‚úâÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä:\n\n{text}", message_thread_id=info["topic_id"])

def thread_buttons(client):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üéØ –í–∏–±—Ä–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç", callback_data=f"profile|{client}"),
        types.InlineKeyboardButton("üßë‚Äçüé® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—É", callback_data=f"to_designer|{client}"),
        types.InlineKeyboardButton("üìé –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", callback_data=f"history|{client}"),
        types.InlineKeyboardButton("üîî –§–æ–ª–ª–æ—É-–∞–ø (24h)", callback_data=f"followup|{client}")
    )
    if THREADS.get(client, {}).get("topic_id"):
        kb.add(types.InlineKeyboardButton("üßµ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É", url=topic_link(GROUP_CHAT_ID, THREADS[client]["topic_id"])))
    return kb

def choose_client_inline(cands):
    kb = types.InlineKeyboardMarkup(row_width=1)
    for name in cands:
        kb.add(types.InlineKeyboardButton(f"üìå {name}", callback_data=f"choose_client|{name}"))
    kb.add(types.InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="enter_client"))
    return kb

# ========= Heuristics =========
CLIENT_PATTERNS = [
    r"#client\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"client\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"from\s*:\s*(?P<name>[A-Za-z][\w\s\-\.&]+)",
    r"(?:best|regards|cheers|thanks|sincerely)\s*,?\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
    r"^‚Äî\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
    r"^-{2,}\s*(?P<name>[A-Za-z][\w\.\-\s]+)$",
]
PROJECT_PATTERNS = [
    r"#project\s*:\s*(?P<title>.+)",
    r"project\s*:\s*(?P<title>.+)",
    r"^subject\s*:\s*(?P<title>.+)$"
]

def _norm(s): return re.sub(r"\s+", " ", s.strip())

def guess_client(text):
    lines = [l.strip() for l in text.splitlines() if l.strip()]
    blob = "\n".join(lines)
    for pat in CLIENT_PATTERNS:
        m = re.search(pat, blob, re.IGNORECASE | re.MULTILINE)
        if m: return _norm(m.group("name"))
    if lines:
        last = lines[-1]
        m = re.match(r"(?P<name>[A-Za-z][A-Za-z \.\-]{1,40})\s*(?:,|CEO|Founder|Manager|Owner)\b", last)
        if m: return _norm(m.group("name"))
    return None

def guess_project(text):
    for pat in PROJECT_PATTERNS:
        m = re.search(pat, text, re.IGNORECASE | re.MULTILINE)
        if m: return _norm(m.group("title"))
    first = text.splitlines()[0].strip() if text.strip() else ""
    if ":" in first and len(first) <= 120:
        return _norm(first)
    return None

# ========= Commands =========
@bot.message_handler(commands=['start'])
def start_cmd(m):
    bot.send_message(m.chat.id, "üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ö–∏–¥–∞–π —Ç–µ–∫—Å—Ç –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî —Å—Ç–≤–æ—Ä—é —Ç–µ–º—É —ñ –∑–±–µ—Ä–µ–∂—É —ñ—Å—Ç–æ—Ä—ñ—é.", reply_markup=main_menu())

@bot.message_handler(commands=['health'])
def health(m): bot.reply_to(m, "‚úÖ alive", reply_markup=main_menu())

@bot.message_handler(commands=['whoami'])
def whoami(m): bot.reply_to(m, f"Your ID: {m.from_user.id}", reply_markup=main_menu())

@bot.message_handler(commands=['getchatid'])
def get_chat_id(m): bot.reply_to(m, f"chat.id = {m.chat.id}", reply_markup=main_menu())

# –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ –≥—Ä—É–ø—ñ/—Ç–µ–º—ñ
@bot.message_handler(commands=['debug_here'])
def debug_here(m):
    bot.reply_to(m, f"chat.id={m.chat.id}\nthread_id={m.message_thread_id}")

@bot.message_handler(commands=['projects_by'])
def projects_by(m):
    parts = m.text.split(maxsplit=1)
    if len(parts) == 1:
        bot.reply_to(m, "–í–∫–∞–∂–∏ —ñ–º‚Äô—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –ü—Ä–∏–∫–ª–∞–¥: `/projects_by Yaryna`", parse_mode="Markdown", reply_markup=main_menu()); return
    name = parts[1].strip()
    items = PROJECTS_BY_DESIGNER.get(name, [])
    if items:
        bot.reply_to(m, "üìã –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è *{}*:\n\n{}".format(name, "\n\n".join(items[-10:])), parse_mode="Markdown", reply_markup=main_menu())
    else:
        bot.reply_to(m, f"üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è {name}.", reply_markup=main_menu())

# ========= –ú–µ–Ω—é (—Ç–µ–ø–ª—ñ) =========
@bot.message_handler(func=lambda m: m.text == "üÜï –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç")
def new_client_btn(m):
    force = types.ForceReply(input_field_placeholder="–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Acme Inc.)")
    msg = bot.reply_to(m, "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç? (—Å—Ç–≤–æ—Ä—é —Ç–µ–º—É —Ç–∞ —Ç—Ä–µ–¥)", reply_markup=force)
    bot.register_for_reply(msg, _set_client_name_step)

def _set_client_name_step(reply_msg):
    name = (reply_msg.text or "").strip()
    if not name:
        bot.reply_to(reply_msg, "–ü–æ—Ä–æ–∂–Ω—î —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", reply_markup=main_menu()); return
    ensure_client(name)
    CURRENT_CLIENT[reply_msg.from_user.id] = name
    try:
        topic_id = ensure_topic_for_client(name, THREADS[name].get("project"))
        link = topic_link(GROUP_CHAT_ID, topic_id)
        kb = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üßµ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É", url=link))
        bot.reply_to(reply_msg, f"üÜï –°—Ç–≤–æ—Ä–∏–≤ –∫–ª—ñ—î–Ω—Ç–∞ *{name}*. –ù–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî –¥–æ–¥–∞–º —É —Ç—Ä–µ–¥.", reply_markup=main_menu())
        bot.send_message(reply_msg.chat.id, "–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ—Ö—ñ–¥:", reply_markup=kb)
    except Exception as e:
        bot.reply_to(reply_msg, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–º—É (GROUP_CHAT_ID?): {e}", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "üìÇ –Ü—Å—Ç–æ—Ä—ñ—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏")
def history_btn(m):
    if not THREADS:
        bot.reply_to(m, "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.", reply_markup=main_menu()); return
    names = sorted(THREADS.keys())
    bot.reply_to(m, "–í–∏–±–µ—Ä–∏ –∫–ª—ñ—î–Ω—Ç–∞:", reply_markup=choose_client_inline(names))

@bot.message_handler(func=lambda m: m.text == "üßµ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É")
def open_topic_btn(m):
    client = CURRENT_CLIENT.get(m.from_user.id)
    if not client:
        bot.reply_to(m, "–°–ø–µ—Ä—à—É –æ–±–µ—Ä–∏/—Å—Ç–≤–æ—Ä–∏ –∫–ª—ñ—î–Ω—Ç–∞ (–∫–Ω–æ–ø–∫–∞ ‚ÄúüÜï –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç‚Äù).", reply_markup=main_menu()); return
    info = ensure_client(client)
    try:
        tid = ensure_topic_for_client(client, info.get("project"))
        link = topic_link(GROUP_CHAT_ID, tid)
        bot.send_message(m.chat.id, "–û—Å—å —Ç–µ–º–∞:", reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üßµ –ü–µ—Ä–µ–π—Ç–∏", url=link)
        ))
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É: {e}", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "üßë‚Äçüé® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—É")
def send_designer_btn(m):
    if not THREADS:
        bot.reply_to(m, "–ù–µ–º–∞—î —Ç—Ä–µ–¥—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞.", reply_markup=main_menu()); return
    client = CURRENT_CLIENT.get(m.from_user.id)
    if not client:
        names = sorted(THREADS.keys())
        bot.reply_to(m, "–û–±–µ—Ä–∏ –∫–ª—ñ—î–Ω—Ç–∞:", reply_markup=choose_client_inline(names)); return
    if not DESIGNERS:
        bot.reply_to(m, "ENV DESIGNERS –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π JSON –∑ —ñ–º–µ–Ω–∞–º–∏ —Ç–∞ Telegram ID.", reply_markup=main_menu()); return
    kb = types.InlineKeyboardMarkup(row_width=1)
    for d in DESIGNERS.keys():
        kb.add(types.InlineKeyboardButton(d, callback_data=f"send_to|{client}|{d}"))
    bot.reply_to(m, f"–ö–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç—Ä–µ–¥ *{client}*?", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üìã –ê–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏")
def active_btn(m):
    act = [n for n,t in THREADS.items() if t.get("status")!="closed"]
    if not act:
        bot.reply_to(m, "–ê–∫—Ç–∏–≤–Ω–∏—Ö –Ω–µ–º–∞—î.", reply_markup=main_menu()); return
    kb = types.InlineKeyboardMarkup(row_width=1)
    for n in act:
        tid = THREADS[n].get("topic_id")
        if tid:
            kb.add(types.InlineKeyboardButton(f"üßµ {n}", url=topic_link(GROUP_CHAT_ID, tid)))
        else:
            kb.add(types.InlineKeyboardButton(f"üßµ {n} (—Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–º—É)", callback_data=f"mk_topic|{n}"))
    bot.reply_to(m, "–ê–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç")
def close_btn(m):
    if not THREADS:
        bot.reply_to(m, "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–µ–¥—ñ–≤.", reply_markup=main_menu()); return
    names = [n for n,t in THREADS.items() if t.get("status")!="closed"]
    if not names:
        bot.reply_to(m, "–£—Å—ñ –≤–∂–µ –∑–∞–∫—Ä–∏—Ç—ñ.", reply_markup=main_menu()); return
    kb = types.InlineKeyboardMarkup(row_width=1)
    for n in names:
        kb.add(types.InlineKeyboardButton(f"‚úÖ –ó–∞–∫—Ä–∏—Ç–∏: {n}", callback_data=f"close|{n}"))
    bot.reply_to(m, "–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–¥ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É")
def price_btn(m):
    bot.reply_to(
        m,
        "–®–≤–∏–¥–∫–∞ —Å—ñ—Ç–∫–∞:\n"
        "‚Ä¢ Logo ‚ÄúClean Start‚Äù ‚Äî $100\n"
        "‚Ä¢ Brand Essentials ‚Äî $220\n"
        "‚Ä¢ Ready to Launch ‚Äî $360\n"
        "‚Ä¢ Complete Look ‚Äî $520\n"
        "‚Ä¢ Identity in Action ‚Äî $1000\n"
        "‚Ä¢ Signature System ‚Äî $1500+",
        reply_markup=main_menu()
    )

# ========= –ì–∞—Ä–¥: —ñ–≥–Ω–æ—Ä—É—î–º–æ –í–°–Ü –≥—Ä—É–ø–æ–≤—ñ –º–µ—Å–µ–¥–∂—ñ, –∫—Ä—ñ–º Cold ‚Äî Inbox =========
def in_cold_inbox(msg):
    if not (COLD_GROUP_ID and COLD_INBOX_TOPIC):
        return False
    if msg.chat.id != COLD_GROUP_ID:
        return False
    return str(msg.message_thread_id or "") == str(COLD_INBOX_TOPIC)

# ========= COLD: —Ç—ñ–ª—å–∫–∏ ‚ÄúCold ‚Äî Inbox‚Äù =========
@bot.message_handler(func=lambda m: in_cold_inbox(m), content_types=['text'])
def cold_inbox_handler(m):
    kb_choose_prof = types.InlineKeyboardMarkup(row_width=2)
    kb_choose_prof.add(
        types.InlineKeyboardButton("Yurii", callback_data=f"cold_setprof|Yurii|{m.message_thread_id}"),
        types.InlineKeyboardButton("Olena", callback_data=f"cold_setprof|Olena|{m.message_thread_id}")
    )
    bot.reply_to(m, "–Ø–∫–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∫—Ä–∞—â–µ –ø–æ–¥–∞—Ç–∏ –Ω–∞ —Ü–µ–π –ª—ñ–¥?", reply_markup=kb_choose_prof)

# ========= –¢–ï–ü–õ–ò–ô: —Ç–µ–∫—Å—Ç –ª–∏—à–µ –∑ –ø—Ä–∏–≤–∞—Ç—ñ–≤ (—ñ –∑ –≥—Ä—É–ø ‚Äî –ù–Ü, –æ–∫—Ä—ñ–º cold inbox) =========
@bot.message_handler(func=lambda m: True, content_types=['text'])
def any_text(m):
    # 1) –Ø–∫—â–æ Cold ‚Äî Inbox, –Ω—ñ—á–æ–≥–æ —Ç—É—Ç –Ω–µ —Ä–æ–±–∏–º–æ (–æ–±—Ä–æ–±–∏–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ö–µ–Ω–¥–ª–µ—Ä)
    if in_cold_inbox(m):
        return
    # 2) –Ø–∫—â–æ —Ü–µ –±—É–¥—å-—è–∫–∞ –≥—Ä—É–ø–∞/—Å—É–ø–µ—Ä–≥—Ä—É–ø–∞ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ, —â–æ–± –Ω–µ –ª–∏–ª–æ—Å—è –≤ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    if m.chat.type in ("group", "supergroup"):
        return

    text = m.text or ""
    current = CURRENT_CLIENT.get(m.from_user.id)
    if current:
        info = ensure_client(current)
        info["history"].append((datetime.utcnow().isoformat(), text))
        # –∫–æ—Ä–æ—Ç–∫—ñ/—Å–ª—É–∂–±–æ–≤—ñ ‚Äî –Ω–µ —à–ª–µ–º–æ –≤ —Ç–µ–º—É
        if len(text.strip()) < 3:
            kb = thread_buttons(current)
            bot.reply_to(m, f"‚úÖ –¢—Ä–µ–¥ *{current}* –≤–∏–±—Ä–∞–Ω–æ. –ù–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó.", reply_markup=kb)
            return
        try:
            ensure_topic_for_client(current, info.get("project"))
            push_to_topic(current, text)
        except Exception:
            pass
        kb = thread_buttons(current)
        bot.reply_to(m, f"‚úÖ –î–æ–¥–∞–Ω–æ –≤ —Ç—Ä–µ–¥ *{current}*.", reply_markup=kb)
        return

    client = guess_client(text)
    project = guess_project(text)
    if client:
        info = ensure_client(client)
        if project: info["project"] = project
        info["history"].append((datetime.utcnow().isoformat(), text))
        CURRENT_CLIENT[m.from_user.id] = client
        try:
            tid = ensure_topic_for_client(client, info.get("project"))
            link = topic_link(GROUP_CHAT_ID, tid)
            kb_open = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üßµ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É", url=link))
            bot.reply_to(m, f"‚úÖ –°—Ç–≤–æ—Ä–∏–≤/–æ–Ω–æ–≤–∏–≤ —Ç—Ä–µ–¥ *{client}*.", reply_markup=main_menu())
            bot.send_message(m.chat.id, "–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ—Ö—ñ–¥:", reply_markup=kb_open)
        except Exception:
            bot.reply_to(m, f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ç—Ä–µ–¥ *{client}*.", reply_markup=thread_buttons(client))
        return

    existing = sorted(THREADS.keys())
    if existing:
        bot.reply_to(m, "–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –∫–ª—ñ—î–Ω—Ç–∞. –û–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É:", reply_markup=choose_client_inline(existing))
    else:
        force = types.ForceReply(input_field_placeholder="–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Acme Inc.)")
        msg = bot.reply_to(m, "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç? (–±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ç—Ä–µ–¥)", reply_markup=force)
        bot.register_for_reply(msg, _set_client_name_step)

# ========= CALLBACKS =========
@bot.callback_query_handler(func=lambda c: True)
def cb(q):
    data = (q.data or "").split("|")
    action = data[0]

    # ---- –¢–ï–ü–õ–ò–ô ----
    if action == "choose_client":
        client = data[1]
        ensure_client(client)
        CURRENT_CLIENT[q.from_user.id] = client
        bot.edit_message_text(f"‚úÖ –û–±—Ä–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: *{client}*. –ù–∞–¥—ñ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –¥–æ–¥–∞–º –≤ —ñ—Å—Ç–æ—Ä—ñ—é.",
                              q.message.chat.id, q.message.id)
        bot.answer_callback_query(q.id); return

    if action == "enter_client":
        msg = bot.send_message(q.message.chat.id, "–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–ª—ñ—î–Ω—Ç–∞:", reply_markup=types.ForceReply())
        bot.register_for_reply(msg, _set_client_name_step)
        bot.answer_callback_query(q.id); return

    if action == "history":
        client = data[1]
        hist = THREADS.get(client, {}).get("history", [])
        if not hist:
            bot.answer_callback_query(q.id, "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è."); return
        text = "\n\n".join([f"{t}:\n{m}" for t,m in hist])[-4000:]
        bot.send_message(q.message.chat.id, f"üïì –Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è *{client}*:\n\n{text}")
        bot.answer_callback_query(q.id); return

    if action == "profile":
        client = data[1]
        kb = types.InlineKeyboardMarkup(row_width=2)
        for p in PROFILES:
            kb.add(types.InlineKeyboardButton(p, callback_data=f"setprofile|{client}|{p}"))
        bot.send_message(q.message.chat.id, f"–î–ª—è *{client}*: –≤–∏–±–µ—Ä–∏ –ø—Ä–æ—Ñ—ñ–ª—å:", reply_markup=kb)
        bot.answer_callback_query(q.id); return

    if action == "setprofile":
        _, client, prof = data
        ensure_client(client); THREADS[client]["profile"] = prof
        bot.send_message(q.message.chat.id, f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å *{prof}* –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è *{client}*  #–ø—Ä–æ—Ñ—ñ–ª—å_{prof}")
        bot.answer_callback_query(q.id); return

    if action == "to_designer":
        client = data[1]
        if not DESIGNERS:
            bot.send_message(q.message.chat.id, "DESIGNERS –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π JSON –∑ —ñ–º–µ–Ω–∞–º–∏ —Ç–∞ Telegram ID.")
            bot.answer_callback_query(q.id); return
        kb = types.InlineKeyboardMarkup(row_width=1)
        for name in DESIGNERS.keys():
            kb.add(types.InlineKeyboardButton(name, callback_data=f"send_to|{client}|{name}"))
        bot.send_message(q.message.chat.id, f"–ö–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç—Ä–µ–¥ *{client}*?", reply_markup=kb)
        bot.answer_callback_query(q.id); return

    if action == "send_to":
        _, client, designer = data
        hist = THREADS.get(client, {}).get("history", [])
        last_msg = hist[-1][1] if hist else "–ë–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
        chat_id = DESIGNERS.get(designer)
        if chat_id:
            PROJECTS_BY_DESIGNER.setdefault(designer, []).append(f"{client}: {last_msg}")
            bot.send_message(chat_id, f"üßæ {client}\n\n{last_msg}")
            bot.send_message(q.message.chat.id, f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ *{designer}*  #–¥–∏–∑–∞–π–Ω–µ—Ä_{designer}")
        else:
            bot.send_message(q.message.chat.id, f"‚ö†Ô∏è –î–ª—è '{designer}' –Ω–µ–º–∞—î Telegram ID —É ENV DESIGNERS.")
        bot.answer_callback_query(q.id); return

    if action == "followup":
        client = data[1]
        info = THREADS.get(client, {})
        last_file = info.get("last_file_sent")
        if last_file and datetime.utcnow() - last_file > timedelta(hours=24):
            bot.send_message(q.message.chat.id, f"üîî 24 –≥–æ–¥–∏–Ω–∏ –º–∏–Ω—É–ª–∏: –Ω–∞–≥–∞–¥–∞–π –∫–ª—ñ—î–Ω—Ç—É *{client}*.")
        else:
            bot.send_message(q.message.chat.id, "üïì –©–µ –Ω–µ –º–∏–Ω—É–ª–æ 24 –≥–æ–¥ –∞–±–æ —Ñ–∞–π–ª –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–≤—Å—è.")
        bot.answer_callback_query(q.id); return

    if action == "close":
        client = data[1]
        if client in THREADS:
            THREADS[client]["status"] = "closed"
            bot.send_message(q.message.chat.id, f"‚úÖ –¢—Ä–µ–¥ *{client}* –∑–∞–∫—Ä–∏—Ç–æ.")
        bot.answer_callback_query(q.id); return

    # ---- COLD (–∫—Ä–æ–∫ 1) ----
    if action == "cold_setprof":
        _, prof, topic_id = data
        bot.edit_message_text(f"–ü—Ä–æ—Ñ—ñ–ª—å –æ–±—Ä–∞–Ω–æ: *{prof}*. –î–∞–ª—ñ –∑–≥–µ–Ω–µ—Ä—É—î–º–æ –ø—ñ—Ç—á —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ü—ñ–Ω–∏ —É –∫—Ä–æ—Ü—ñ 2.",
                              q.message.chat.id, q.message.id)
        bot.answer_callback_query(q.id); return

# ========= RUN =========
print(f"Bot is starting‚Ä¶ GROUP_CHAT_ID={GROUP_CHAT_ID} COLD_GROUP_ID={COLD_GROUP_ID} COLD_INBOX_TOPIC={COLD_INBOX_TOPIC}")
bot.infinity_polling(skip_pending=True, timeout=60, long_polling_timeout=60)
